name: Deploy to AWS ECS (Optimized)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY_API: dog-classifier-api
  ECR_REPOSITORY_UI: dog-classifier-ui
  ECS_SERVICE_API: api-service
  ECS_SERVICE_UI: ui-service
  ECS_CLUSTER: dog-classifier-cluster
  ECS_TASK_DEFINITION_API: api-task-def
  ECS_TASK_DEFINITION_UI: ui-task-def
  CONTAINER_NAME_API: dog-classifier-api
  CONTAINER_NAME_UI: dog-classifier-ui

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      ui-changed: ${{ steps.changes.outputs.ui }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'api/**'
              - 'model_training/**'
            ui:
              - 'ui/**'

  deploy-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true' || github.event_name == 'push'
    environment: production
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push API image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd api
          # Build com cache multi-stage
          docker buildx build \
            --push \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_API:latest \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_API \
            --query taskDefinition > api-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: api-task-definition.json
          container-name: ${{ env.CONTAINER_NAME_API }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_API }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-ui:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ui-changed == 'true' || github.event_name == 'push'
    environment: production
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push UI image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ui
          # Build com cache multi-stage
          docker buildx build \
            --push \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_UI:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY_UI:latest \
            .
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_UI:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_UI \
            --query taskDefinition > ui-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ui-task-definition.json
          container-name: ${{ env.CONTAINER_NAME_UI }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_UI }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  notify:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-api, deploy-ui]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Services Updated" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.detect-changes.outputs.api-changed }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
            echo "- ✅ **API**: ${{ needs.deploy-api.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ **API**: No changes detected" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.detect-changes.outputs.ui-changed }}" == "true" || "${{ github.event_name }}" == "push" ]]; then
            echo "- ✅ **UI**: ${{ needs.deploy-ui.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ **UI**: No changes detected" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Infrastructure" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
